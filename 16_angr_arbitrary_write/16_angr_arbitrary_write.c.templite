${
import random, os
random.seed(os.urandom(16))

def expanded_switch_statement(variable, miss_statement, hit_statement, samples):
  target = random.choice(samples)

  write('switch (%s) {' % (variable,))
  for sample in samples:
    write('case %d: %s; break;' % (sample, hit_statement if sample == target else miss_statement))
  write('default: %s; break; }' % (miss_statement,))
}$

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <stdint.h>
#include <signal.h>

#define USERDEF "${ userdef }$"

char msg[] = "${ description }$";
char unimportant_buffer[16];
char password_buffer[16];
uint32_t key;

void print_msg() {
  printf("%s", msg);
}

struct overflow_me {
  char buffer[16];
  char* to_copy_to;
};

int main(int argc, char* argv[]) {
  struct overflow_me locals;
  locals.to_copy_to = unimportant_buffer;

  memset(locals.buffer, 0, 16);
  strncpy(password_buffer, "PASSWORD", 12);

  //print_msg();

  printf("Enter the password: ");
  scanf("%u %20s", &key, locals.buffer);

  ${
  hit_statement = 'strncpy(locals.to_copy_to, locals.buffer, 16)'
  miss_statement = 'strncpy(unimportant_buffer, locals.buffer, 16)'
  expanded_switch_statement('key', miss_statement, hit_statement, random.sample(range(2**26-1), 2))
  }$

  if (strncmp(password_buffer, USERDEF, 8)) {
    printf("Try again.\n");
  } else {
    printf("Good Job.\n");
  }

  return 0;
}
