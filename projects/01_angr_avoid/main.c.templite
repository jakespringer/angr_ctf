${
import random, os
random.seed(os.urandom(8))
userdef_charset = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'
userdef = ''.join(random.choice(userdef_charset) for _ in range(8))

def check_string_recursive(array0, array1, random_list, bit):
  if bit < 0:
    write('maybe_good(%s, %s);' % (array0, array1))
  else:
    if random_list[0]:
      write('if (CHECK_BIT(%s, %d) == CHECK_BIT(%s, %d)) {' % (array0, bit, array1, bit))
      check_string_recursive(array0, array1, random_list[1:], bit-1)
      write('} else { avoid_me(); ')
      check_string_recursive(array0, array1, random_list[1:], bit-1)
      write('}')
    else:
      write('if (CHECK_BIT(%s, %d) != CHECK_BIT(%s, %d)) { avoid_me();' % (array0, bit, array1, bit))
      check_string_recursive(array0, array1, random_list[1:], bit-1)
      write('} else { ')
      check_string_recursive(array0, array1, random_list[1:], bit-1)
      write('}')
}$

#define _GNU_SOURCE
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <stdint.h>

#define USERDEF "${ userdef }$"
#define LEN_USERDEF ${ write(len(userdef)) }$

// return true if nth bit of array is 1
#define CHECK_BIT(array, bit_index) (!!(((uint8_t*) array)[bit_index / 8] & (((uint8_t) 0x1) << (bit_index % 8))))

char msg[] =
  "${ description }$";

uint8_t should_succeed = 1;

void print_msg() {
  printf("%s", msg);
}

int complex_function(int value, int i) {
#define LAMBDA 5
  if (!('A' <= value && value <= 'Z')) {
    printf("Try again.\n");
    exit(1);
  }
  return ((value - 'A' + (LAMBDA * i)) % ('Z' - 'A' + 1)) + 'A';
}

void avoid_me() {
  should_succeed = 0;
}

void maybe_good(char* compare0, char* compare1) {
  if (should_succeed && !strncmp(compare0, compare1, 8)) {
    printf("Good Job.\n");
  } else {
    printf("Try again.\n");
  }
}

int main(int argc, char* argv[]) {
  char buffer[20];
  char password[20];

  //print_msg();

  for (int i=0; i < 20; ++i) {
    password[i] = 0;
  }

  strncpy(password, USERDEF, LEN_USERDEF);

  printf("Enter the password: ");
  scanf("%8s", buffer);

  for (int i=0; i<LEN_USERDEF; ++i) {
    buffer[i] = (char) complex_function(buffer[i], i);
  }

  ${ check_string_recursive('buffer', 'password', random_list, 12) }$
}
